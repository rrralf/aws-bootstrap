AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  #
  # define VPC for the stack
  #
  StackVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.121.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  # create internet gateway for the VPC
  StackVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production
      - Key: Name
        Value: !Sub '${AWS::StackName}-igw'


  # attach igw to the vpc
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StackVPC
      InternetGatewayId: !Ref StackVPCInternetGateway

  # add routetable to the vpc
  VPCPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref StackVPC

  # route internet traffic to the gateway
  SubnetInternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StackVPCInternetGateway
      RouteTableId: !Ref VPCPublicRouteTable

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StackVPC
      CidrBlock: 10.121.0.0/24
      AvailabilityZone: "eu-central-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-1a'

  PublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref VPCPublicRouteTable
      SubnetId: !Ref PublicSubnetA

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      GroupName: !Sub '${AWS::StackName}-sg'
      VpcId: !Ref StackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        # tag "name" is used to "name" the instance
        - Key: Name
          Value: !Ref AWS::StackName

  # The next resource we’ll create is an IAM role, which our EC2 
  # instance will use to define its permissions. At this
  # point our application doesn’t need much, as it isn’t using
  # any AWS services yet. For now, we will grant our instance
  # role full access to AWS CloudWatch
  EC2InstanceRole:  
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Next, we’ll create an instance profile to tie our IAM role to
  # the EC2 instance that we’ll create
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  # Now it’s time to create our final resource, the EC2 instance itself
  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        # This tells CloudFormation to wait for a signal before marking the new
        # instance as created (we’ll see how in the install script).
        # Timeout: PT15M
        Timeout: PT5M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wget: []
              unzip: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      Monitoring: true
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # send script output to /tmp so we can debug boot failures
          exec > /tmp/userdata.log 2>&1

          # Update all packages
          yum -y update

          # Get latest cfn scripts;
          https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/bestpractices.html#cfninit

          yum install -y aws-cfn-bootstrap
          yum install -y git

          # Have CloudFormation install any files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource EC2Instance

          cat > /tmp/install_script.sh << EOF
            # START
            echo "Setting up NodeJS Environment"
            curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

            # Dot source the files to ensure that variables are available within
            the current shell
            . /home/ec2-user/.nvm/nvm.sh
            . /home/ec2-user/.bashrc

            # Install NVM, NPM, Node.JS
            nvm alias default v12.7.0
            nvm install v12.7.0
            nvm use v12.7.0

            # Download latest code, unzip it into /home/ec2-user/app
            wget https://github.com/rrralf/aws-bootstrap/archive/refs/heads/main.zip
            unzip main.zip
            mv aws-bootstrap-main app
            # Create log directory
            mkdir -p /home/ec2-user/app/logs
            # Run server
            cd app/src
            npm install
            npm start
          EOF

          chown ec2-user:ec2-user /tmp/install_script.sh && chmod a+x
          /tmp/install_script.sh

          sleep 1; su - ec2-user -c "/tmp/install_script.sh"

          # Signal to CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource EC2Instance
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${Instance.PublicDnsName}:8080"
    Export:
      Name: InstanceEndpoint
