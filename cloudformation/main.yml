AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  #
  # define VPC for the stack
  StackVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.121.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: !Sub 'vpc-${AWS::StackName}'

  StackSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StackVPC
      CidrBlock: 10.121.0.0/24
      AvailabilityZone: "eu-central-1a"
      Tags:
      - Key: stack
        Value: production

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      GroupName: !Sub 'msg-${AWS::StackName}'
      VpcId: !Ref StackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        # tag "name" is used to "name" the instance
        - Key: Name
          Value: !Ref AWS::StackName

  # The next resource we’ll create is an IAM role, which our EC2 
  # instance will use to define its permissions. At this
  # point our application doesn’t need much, as it isn’t using
  # any AWS services yet. For now, we will grant our instance
  # role full access to AWS CloudWatch
  EC2InstanceRole:  
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Next, we’ll create an instance profile to tie our IAM role to
  # the EC2 instance that we’ll create
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  # Now it’s time to create our final resource, the EC2 instance itself
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        # This tells CloudFormation to wait for a signal before marking the new
        # instance as created (we’ll see how in the install script).
        Timeout: PT15M
        Count: 1
    # Metadata:
    #   AWS::CloudFormation::Init:
    #     config:
    #       packages:
    #         yum:
    #           wget: []
    #           unzip: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      Monitoring: true
      SubnetId: !Ref StackSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      # UserData:
      #   # ... 
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${EC2Instance.PublicDnsName}:8080"
    Export:
      Name: InstanceEndpoint
